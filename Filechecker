import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.*;
/**
 * used to get file's code or hashCode
 */
public class FileChecker {
	InputStream file;
	private int size; 
	private int[] data;
	private String dataString = "";
	private String md5String = "";
	private boolean found(String string){
		if (dataString.contains(string)){
			return true;
		}
		return false;
	}
	
	/**
	 * used to convert data to string
	 * @param signature if true then also convert signature
	 */
	private void dataToString(boolean signature){
	
		for (int i = 0; i < size; i++){
			md5String += data[i];
			if (signature){
				for (int j = 0; j < 8; j++){
					dataString += (data[i] % 2);
					data[i] /= 2;
				}
			}
		}
	}
	
	/**
	 * used to check file for signatures
	 */
	private void checkSignatures(){
		for (int i = 0; i < base.dataSize; i++){
			if (found(base.data[i])){
				System.out.println("Virus alarm!");
				return;
			}
		}
		System.out.println("No firuses in this file");
	}
	/**
	 * used to get file's hash 
	 * @return String - hash
	 */
	public String getHash(){
		MessageDigest messageDigest = null;
		try {
			messageDigest = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
		} 
		byte[] bytesOfMessage;
		bytesOfMessage = md5String.getBytes();
		messageDigest.update(bytesOfMessage);
		byte[] theDigest = messageDigest.digest();
		String result = "";
		for (int i = 0; i < theDigest.length; i ++){
			result += theDigest[i];
		}
		return result;
	}
	
	
	private SignatureData base;
	
	
	/**
	 * constructor for hash operations
	 */
	FileChecker(File fileName){
		try {
			file = new FileInputStream(fileName);
		} catch (FileNotFoundException e) {
			System.out.println("Error, file not found!!");
			return;
		} 
		try {
			size = file.available();
		} catch (IOException e) {
		}
		
		data = new int[size];
		for (int i = 0; i < size; i++){
			try {
				data[i] = file.read();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		dataToString(false);
		getHash();
	}
	/**
	 * constructor for signature operations
	 * @param base data which will be used to check file
	 */
	FileChecker(String fileName, SignatureData base){
		try {
			file = new FileInputStream(fileName);
		} catch (FileNotFoundException e) {
			System.out.println("Error, file not found!!");
			return;
		} 
		this.base = base;
		try {
			size = file.available();
		} catch (IOException e) {
		}
		
		data = new int[size];
		for (int i = 0; i < size; i++){
			try {
				data[i] = file.read();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		dataToString(true);
		checkSignatures();
		//checkSum();
	}
}
