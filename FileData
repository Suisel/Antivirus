import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 *used to work with file's hash 
 */
public class FileData {
	
	private String[][] dataBaseNames = new String[100][100];
	private String[][] dataBaseHash = new String[100][100];
	private String[] dataBasePath = new String[100];
	private int[] countBase = new int[100];
	private int directoryCount = 0;
	
	FileData(){
		loadInfo();
	}
	
	/**
	 * used to add a new directory to Hash dataBase
	 * @param path of directory
	 */
	public void addToFileData(String path){
		File directory = new File(path);
		if (!directory.isDirectory()){
			System.out.println("Error, enter path to a directory");
			return;
		}
		dataBasePath[directoryCount] = path;
		String[] fileNames = directory.list();
		String hash;
		countBase[directoryCount] = fileNames.length;
		File currentFile;
		FileChecker checker;
		for (int i = 0; i < fileNames.length; i++){
			hash = "0";
			currentFile = new File(path + "//" + fileNames[i]);
			if (currentFile.isFile()){
				checker = new FileChecker(currentFile);
				hash = checker.getHash();
			}
			dataBaseNames[directoryCount][i] = fileNames[i];
			dataBaseHash[directoryCount][i] = hash;
		}
		directoryCount++;
	}
	
	Scanner input;
	String[] data;
	public int dataSize;
	
	/**
	 * used to load all previous collected information
	 */
	private void loadInfo(){
		try {
			input = new Scanner(new File("HashData.txt"));
		} catch (FileNotFoundException e) {
			System.out.println("Error, file not foud!");
		}
		directoryCount = input.nextInt(); 
		if (input.hasNextLine()){
			input.nextLine();
		}
		for (int i = 0; i < directoryCount; i++){
			dataBasePath[i] = input.nextLine();
			countBase[i] = input.nextInt(); input.nextLine();
			for (int j = 0; j < countBase[i]; j++){
				dataBaseNames[i][j] = input.nextLine();
				dataBaseHash[i][j] = input.nextLine();
			}
		}
	}
	/**
	 * used to save all information
	 * rewrites HashData.txt 
	 */
	public void close(){
		PrintWriter writer = null;
		try {
			writer = new PrintWriter(new File("HashData.txt"));
		} catch (FileNotFoundException e) {
			System.out.println("Error!!");
		} 
		writer.println(directoryCount);
		for (int i = 0; i < directoryCount; i++){
			writer.println(dataBasePath[i]);
			writer.println(countBase[i]);
			for (int j = 0; j < countBase[i]; j++){
				writer.println(dataBaseNames[i][j]);
				writer.println(dataBaseHash[i][j]);
			}
		}
		writer.close();
	}
	
	/**
	 * used to check all directories for changes of hash
	 */
	public void check(){
		String hash;
		File currentFile;
		FileChecker checker;
		for (int i = 0; i < directoryCount; i++){
			File directory = new File(dataBasePath[i]);
			String[] fileNames = directory.list();
			for (int j = 0; j < countBase[j]; j++){
				hash = "0";
				currentFile = new File(dataBasePath[j] + "//" + fileNames[j]);
				if (currentFile.isFile()){
					checker = new FileChecker(currentFile);
					hash = checker.getHash();
				}
				if (!hash.equals(dataBaseHash[i][j])){
					System.out.println("Sum of " + dataBasePath[j] + "\\" + fileNames[j] + " has changed!");
				}
			}
		}
		System.out.println("Checked!");
	}
	
}
